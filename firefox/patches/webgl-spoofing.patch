diff --git a/dom/canvas/ClientWebGLContext.cpp b/dom/canvas/ClientWebGLContext.cpp
index ba79bca2c3b1..e13bc9a2b84c 100644
--- a/dom/canvas/ClientWebGLContext.cpp
+++ b/dom/canvas/ClientWebGLContext.cpp
@@ -4,6 +4,9 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "ClientWebGLContext.h"
+#include "MaskConfig.hpp"
+#include <algorithm>
+#include <cstddef>
 
 #include <bitset>
 #include <fmt/format.h>
@@ -752,6 +755,13 @@ void ClientWebGLContext::SetUnpackColorSpace(
   Run<RPROC(SetUnpackColorSpace)>(*mUnpackColorSpace);
 }
 
+bool ClientWebGLContext::MBoolVal(const std::string& key, bool defaultValue) {
+  if (auto value = MaskConfig::GetAttribute<bool>(key, mIsWebGL2);
+      value.has_value())
+    return value.value();
+  return defaultValue;
+}
+
 void ClientWebGLContext::GetContextAttributes(
     dom::Nullable<dom::WebGLContextAttributes>& retval) {
   retval.SetNull();
@@ -762,15 +772,40 @@ void ClientWebGLContext::GetContextAttributes(
 
   const auto& options = mNotLost->info.options;
 
-  result.mAlpha.Construct(options.alpha);
-  result.mDepth = options.depth;
-  result.mStencil = options.stencil;
-  result.mAntialias.Construct(options.antialias);
-  result.mPremultipliedAlpha = options.premultipliedAlpha;
-  result.mPreserveDrawingBuffer = options.preserveDrawingBuffer;
-  result.mFailIfMajorPerformanceCaveat = options.failIfMajorPerformanceCaveat;
-  result.mPowerPreference = options.powerPreference;
-  result.mForceSoftwareRendering = options.forceSoftwareRendering;
+  result.mAlpha.Construct(MBoolVal("alpha", options.alpha));
+  result.mDepth = MBoolVal("depth", options.depth);
+  result.mStencil = MBoolVal("stencil", options.stencil);
+  result.mAntialias.Construct(MBoolVal("antialias", options.antialias));
+  result.mPremultipliedAlpha = MBoolVal(
+      "webGl:contextAttributes.premultipliedAlpha", options.premultipliedAlpha);
+  result.mPreserveDrawingBuffer =
+      MBoolVal("preserveDrawingBuffer", options.preserveDrawingBuffer);
+  result.mFailIfMajorPerformanceCaveat = MBoolVal(
+      "failIfMajorPerformanceCaveat", options.failIfMajorPerformanceCaveat);
+  if (auto value =
+          MaskConfig::GetAttribute<std::string>("powerPreference", mIsWebGL2);
+      value.has_value()) {
+    // Convert to enum
+    switch (value.value()[0]) {
+      case 'd':
+        result.mPowerPreference = dom::WebGLPowerPreference::Default;
+        break;
+      case 'l':
+        result.mPowerPreference = dom::WebGLPowerPreference::Low_power;
+        break;
+      case 'h':
+        result.mPowerPreference = dom::WebGLPowerPreference::High_performance;
+        break;
+      default:
+        // Invalid value
+        result.mPowerPreference = options.powerPreference;
+        break;
+    }
+  } else {
+    result.mPowerPreference = options.powerPreference;
+  }
+  result.mForceSoftwareRendering = MBoolVal(
+      "forceSoftwareRendering", options.forceSoftwareRendering);
 }
 
 // -----------------------
@@ -988,18 +1023,28 @@ bool ClientWebGLContext::CreateHostContext(const uvec2& requestedSize) {
 std::unordered_map<GLenum, bool> webgl::MakeIsEnabledMap(const bool webgl2) {
   auto ret = std::unordered_map<GLenum, bool>{};
 
-  ret[LOCAL_GL_BLEND] = false;
-  ret[LOCAL_GL_CULL_FACE] = false;
-  ret[LOCAL_GL_DEPTH_TEST] = false;
-  ret[LOCAL_GL_DITHER] = true;
-  ret[LOCAL_GL_POLYGON_OFFSET_FILL] = false;
-  ret[LOCAL_GL_SAMPLE_ALPHA_TO_COVERAGE] = false;
-  ret[LOCAL_GL_SAMPLE_COVERAGE] = false;
-  ret[LOCAL_GL_SCISSOR_TEST] = false;
-  ret[LOCAL_GL_STENCIL_TEST] = false;
+  ret[LOCAL_GL_BLEND] =
+      MaskConfig::MParamGL<bool>(LOCAL_GL_BLEND, false, webgl2);
+  ret[LOCAL_GL_CULL_FACE] =
+      MaskConfig::MParamGL<bool>(LOCAL_GL_CULL_FACE, false, webgl2);
+  ret[LOCAL_GL_DEPTH_TEST] =
+      MaskConfig::MParamGL<bool>(LOCAL_GL_DEPTH_TEST, false, webgl2);
+  ret[LOCAL_GL_DITHER] =
+      MaskConfig::MParamGL<bool>(LOCAL_GL_DITHER, true, webgl2);
+  ret[LOCAL_GL_POLYGON_OFFSET_FILL] =
+      MaskConfig::MParamGL<bool>(LOCAL_GL_POLYGON_OFFSET_FILL, false, webgl2);
+  ret[LOCAL_GL_SAMPLE_ALPHA_TO_COVERAGE] = MaskConfig::MParamGL<bool>(
+      LOCAL_GL_SAMPLE_ALPHA_TO_COVERAGE, false, webgl2);
+  ret[LOCAL_GL_SAMPLE_COVERAGE] =
+      MaskConfig::MParamGL<bool>(LOCAL_GL_SAMPLE_COVERAGE, false, webgl2);
+  ret[LOCAL_GL_SCISSOR_TEST] =
+      MaskConfig::MParamGL<bool>(LOCAL_GL_SCISSOR_TEST, false, webgl2);
+  ret[LOCAL_GL_STENCIL_TEST] =
+      MaskConfig::MParamGL<bool>(LOCAL_GL_STENCIL_TEST, false, webgl2);
 
   if (webgl2) {
-    ret[LOCAL_GL_RASTERIZER_DISCARD] = false;
+    ret[LOCAL_GL_RASTERIZER_DISCARD] =
+        MaskConfig::MParamGL<bool>(LOCAL_GL_RASTERIZER_DISCARD, false, webgl2);
   }
 
   return ret;
@@ -2073,6 +2118,59 @@ void ClientWebGLContext::GetParameter(JSContext* cx, GLenum pname,
   const auto& state = State();
 
   // -
+  std::optional<
+      std::variant<int64_t, bool, double, std::string, std::nullptr_t>>
+      data;
+  data = MaskConfig::GLParam(pname, mIsWebGL2);
+
+  if (data.has_value()) {
+    const auto& value = data.value();
+    if (std::holds_alternative<int64_t>(value)) {
+      retval.set(JS::NumberValue(double(std::get<int64_t>(value))));
+      return;
+    }
+    if (std::holds_alternative<double>(value)) {
+      retval.set(JS::NumberValue(std::get<double>(value)));
+      return;
+    }
+    if (std::holds_alternative<bool>(value)) {
+      retval.set(JS::BooleanValue(std::get<bool>(value)));
+      return;
+    }
+    if (std::holds_alternative<std::string>(value)) {
+      retval.set(StringValue(cx, std::get<std::string>(value), rv));
+      return;
+    }
+    if (std::holds_alternative<std::nullptr_t>(value)) {
+      retval.set(JS::NullValue());
+      return;
+    }
+  }
+  // If the value is not array (we will handle those later),
+  // then check if it should be blocked.
+  switch (pname) {
+    case LOCAL_GL_DEPTH_RANGE:
+    case LOCAL_GL_ALIASED_POINT_SIZE_RANGE:
+    case LOCAL_GL_ALIASED_LINE_WIDTH_RANGE:
+    case LOCAL_GL_COLOR_CLEAR_VALUE:
+    case LOCAL_GL_BLEND_COLOR:
+    case LOCAL_GL_MAX_VIEWPORT_DIMS:
+    case LOCAL_GL_SCISSOR_BOX:
+    case LOCAL_GL_VIEWPORT:
+    case LOCAL_GL_COMPRESSED_TEXTURE_FORMATS:
+    case LOCAL_GL_COLOR_WRITEMASK:
+    case dom::WEBGL_debug_renderer_info_Binding::UNMASKED_RENDERER_WEBGL:
+    case dom::WEBGL_debug_renderer_info_Binding::UNMASKED_VENDOR_WEBGL:
+    case LOCAL_GL_RENDERER:
+    case LOCAL_GL_VENDOR:
+      break;
+    default:
+      if (MaskConfig::CheckBool(mIsWebGL2 ? "webGl2:parameters:blockIfNotDefined"
+                                          : "webGl:parameters:blockIfNotDefined")) {
+        retval.set(JS::NullValue());
+        return;
+      }
+  }
 
   const auto fnSetRetval_Buffer = [&](const GLenum target) {
     const auto buffer = *MaybeFind(state.mBoundBufferByTarget, target);
@@ -2178,49 +2276,84 @@ void ClientWebGLContext::GetParameter(JSContext* cx, GLenum pname,
 
     // 2 floats
     case LOCAL_GL_DEPTH_RANGE:
-      retval.set(Create<dom::Float32Array>(cx, this, state.mDepthRange, rv));
+      retval.set(Create<dom::Float32Array>(
+          cx, this,
+          MaskConfig::MParamGL<std::array<float, 2UL>>(pname, state.mDepthRange,
+                                                       mIsWebGL2),
+          rv));
       return;
 
     case LOCAL_GL_ALIASED_POINT_SIZE_RANGE:
-      retval.set(
-          Create<dom::Float32Array>(cx, this, limits.pointSizeRange, rv));
+      retval.set(Create<dom::Float32Array>(
+          cx, this,
+          MaskConfig::MParamGL<std::array<float, 2UL>>(
+              pname, limits.pointSizeRange, mIsWebGL2),
+          rv));
       return;
 
     case LOCAL_GL_ALIASED_LINE_WIDTH_RANGE:
-      retval.set(
-          Create<dom::Float32Array>(cx, this, limits.lineWidthRange, rv));
+      retval.set(Create<dom::Float32Array>(
+          cx, this,
+          MaskConfig::MParamGL<std::array<float, 2UL>>(
+              pname, limits.lineWidthRange, mIsWebGL2),
+          rv));
       return;
 
     // 4 floats
     case LOCAL_GL_COLOR_CLEAR_VALUE:
-      retval.set(Create<dom::Float32Array>(cx, this, state.mClearColor, rv));
+      retval.set(Create<dom::Float32Array>(
+          cx, this,
+          MaskConfig::MParamGL<std::array<float, 4UL>>(pname, state.mClearColor,
+                                                       mIsWebGL2),
+          rv));
       return;
 
     case LOCAL_GL_BLEND_COLOR:
-      retval.set(Create<dom::Float32Array>(cx, this, state.mBlendColor, rv));
+      retval.set(Create<dom::Float32Array>(
+          cx, this,
+          MaskConfig::MParamGL<std::array<float, 4UL>>(pname, state.mBlendColor,
+                                                       mIsWebGL2),
+          rv));
       return;
 
     // 2 ints
     case LOCAL_GL_MAX_VIEWPORT_DIMS: {
       auto maxViewportDim = BitwiseCast<int32_t>(limits.maxViewportDim);
       const auto dims = std::array<int32_t, 2>{maxViewportDim, maxViewportDim};
-      retval.set(Create<dom::Int32Array>(cx, this, dims, rv));
+      retval.set(Create<dom::Int32Array>(
+          cx, this,
+          MaskConfig::MParamGL<std::array<int32_t, 2UL>>(pname, dims,
+                                                         mIsWebGL2),
+          rv));
       return;
     }
 
     // 4 ints
     case LOCAL_GL_SCISSOR_BOX:
-      retval.set(Create<dom::Int32Array>(cx, this, state.mScissor, rv));
+      retval.set(Create<dom::Int32Array>(
+          cx, this,
+          MaskConfig::MParamGL<std::array<int32_t, 4UL>>(pname, state.mScissor,
+                                                         mIsWebGL2),
+          rv));
       return;
 
     case LOCAL_GL_VIEWPORT:
-      retval.set(Create<dom::Int32Array>(cx, this, state.mViewport, rv));
+      retval.set(Create<dom::Int32Array>(
+          cx, this,
+          MaskConfig::MParamGL<std::array<int32_t, 4UL>>(pname, state.mViewport,
+                                                         mIsWebGL2),
+          rv));
       return;
 
-    // any
     case LOCAL_GL_COMPRESSED_TEXTURE_FORMATS:
-      retval.set(Create<dom::Uint32Array>(cx, this,
-                                          state.mCompressedTextureFormats, rv));
+      std::vector<uint32_t> compressedTextureUint32(
+          state.mCompressedTextureFormats.begin(),
+          state.mCompressedTextureFormats.end());
+      retval.set(Create<dom::Uint32Array>(
+          cx, this,
+          MaskConfig::MParamGLVector<uint32_t>(pname, compressedTextureUint32,
+                                               mIsWebGL2),
+          rv));
       return;
   }
 
@@ -2355,10 +2488,18 @@ void ClientWebGLContext::GetParameter(JSContext* cx, GLenum pname,
 
     switch (pname) {
       case LOCAL_GL_VENDOR:
+        if (auto value = MaskConfig::GetString("webGl:vendor")) {
+          ret = Some(value.value());
+          break;
+        }
         ret = Some(std::string{"Mozilla"});
         break;
 
       case LOCAL_GL_RENDERER: {
+        if (auto value = MaskConfig::GetString("webGl:renderer")) {
+          ret = Some(value.value());
+          break;
+        }
         bool allowRenderer = StaticPrefs::webgl_enable_renderer_query();
         if (ShouldResistFingerprinting(RFPTarget::WebGLRenderInfo)) {
           allowRenderer = false;
@@ -2400,6 +2541,10 @@ void ClientWebGLContext::GetParameter(JSContext* cx, GLenum pname,
 
         switch (pname) {
           case dom::WEBGL_debug_renderer_info_Binding::UNMASKED_RENDERER_WEBGL:
+            if (auto value = MaskConfig::GetString("webGl:renderer")) {
+              ret = Some(value.value());
+              break;
+            }
             if (ShouldResistFingerprinting(RFPTarget::WebGLRenderInfo)) {
               ret = Some("Mozilla"_ns);
             } else {
@@ -2411,6 +2556,10 @@ void ClientWebGLContext::GetParameter(JSContext* cx, GLenum pname,
             break;
 
           case dom::WEBGL_debug_renderer_info_Binding::UNMASKED_VENDOR_WEBGL:
+            if (auto value = MaskConfig::GetString("webGl:vendor")) {
+              ret = Some(value.value());
+              break;
+            }
             ret = ShouldResistFingerprinting(RFPTarget::WebGLRenderInfo)
                       ? Some("Mozilla"_ns)
                       : GetUnmaskedVendor();
@@ -2504,7 +2653,9 @@ void ClientWebGLContext::GetParameter(JSContext* cx, GLenum pname,
         case LOCAL_GL_COLOR_WRITEMASK: {
           const auto mask = uint8_t(*maybe);
           const auto bs = std::bitset<4>(mask);
-          const auto src = std::array<bool, 4>{bs[0], bs[1], bs[2], bs[3]};
+          const auto src = MaskConfig::MParamGL<std::array<bool, 4>>(
+              pname, std::array<bool, 4>{bs[0], bs[1], bs[2], bs[3]},
+              mIsWebGL2);
           JS::Rooted<JS::Value> arr(cx);
           if (!dom::ToJSValue(cx, src.data(), src.size(), &arr)) {
             rv = NS_ERROR_OUT_OF_MEMORY;
@@ -2898,6 +3049,24 @@ ClientWebGLContext::GetShaderPrecisionFormat(const GLenum shadertype,
   const FuncScope funcScope(*this, "getShaderPrecisionFormat");
   if (IsContextLost()) return nullptr;
 
+  // Check for spoofed value
+  if (auto value =
+          MaskConfig::MShaderData(shadertype, precisiontype, mIsWebGL2)) {
+    const auto& format = value.value();
+    return AsAddRefed(new WebGLShaderPrecisionFormatJS(
+        webgl::ShaderPrecisionFormat{
+            static_cast<uint8_t>(format[0]),  // rangeMin
+            static_cast<uint8_t>(format[1]),  // rangeMax
+            static_cast<uint8_t>(format[2])   // precision
+        }));
+  }
+  // Check if block if not defined is on
+  if (MaskConfig::CheckBool(
+          mIsWebGL2 ? "webGl2:shaderPrecisionFormats:blockIfNotDefined"
+                    : "webGl:shaderPrecisionFormats:blockIfNotDefined")) {
+    return nullptr;
+  }
+
   const auto& shaderPrecisions = *mNotLost->info.shaderPrecisions;
   const auto args =
       webgl::GetShaderPrecisionFormatArgs{shadertype, precisiontype};
@@ -5918,6 +6087,17 @@ bool ClientWebGLContext::IsSupported(const WebGLExtensionID ext,
     return false;
   }
 
+  if (std::vector<std::string> maskValues =
+          MaskConfig::GetStringList(mIsWebGL2 ? "webGl2:supportedExtensions"
+                                              : "webGl:supportedExtensions");
+      !maskValues.empty()) {
+    if (std::find(maskValues.begin(), maskValues.end(),
+                  GetExtensionName(ext)) != maskValues.end()) {
+      return true;
+    }
+    return false;
+  }
+
   const auto& limits = Limits();
   return limits.supportedExtensions[ext];
 }
@@ -5929,6 +6109,18 @@ void ClientWebGLContext::GetSupportedExtensions(
   if (!mNotLost) return;
 
   auto& retarr = retval.SetValue();
+
+  // Implement separately to prevent O(n^2) timing
+  if (std::vector<std::string> maskValues =
+          MaskConfig::GetStringList(mIsWebGL2 ? "webGl2:supportedExtensions"
+                                              : "webGl:supportedExtensions");
+      !maskValues.empty()) {
+    for (const auto& ext : maskValues) {
+      retarr.AppendElement(NS_ConvertUTF8toUTF16(ext));
+    }
+    return;
+  }
+
   for (const auto i : MakeEnumeratedRange(WebGLExtensionID::Max)) {
     if (!IsSupported(i, callerType)) continue;
 
diff --git a/dom/canvas/ClientWebGLContext.h b/dom/canvas/ClientWebGLContext.h
index 14787aafa7d1..139f6a266957 100644
--- a/dom/canvas/ClientWebGLContext.h
+++ b/dom/canvas/ClientWebGLContext.h
@@ -1075,6 +1075,9 @@ class ClientWebGLContext final : public nsICanvasRenderingContextInternal,
 
   // -
 
+  // Helper to get booleans set in MaskConfig
+  bool MBoolVal(const std::string& key, bool defaultValue);
+
   void GetContextAttributes(dom::Nullable<dom::WebGLContextAttributes>& retval);
 
  private:
diff --git a/dom/canvas/moz.build b/dom/canvas/moz.build
index 4a774aed1938..4d8ea9ff8a05 100644
--- a/dom/canvas/moz.build
+++ b/dom/canvas/moz.build
@@ -228,3 +228,6 @@ if CONFIG["CC_TYPE"] == "gcc":
 
 # Add libFuzzer configuration directives
 include("/tools/fuzzing/libfuzzer-config.mozbuild")
+
+# DOM Mask
+LOCAL_INCLUDES += ["/camoucfg"]
\ No newline at end of file
